@using Shooter.Shared.RpcInterfaces
@using Shooter.Client.Common
@using System.Collections.Generic
@using System.Linq
@inject IJSRuntime JS
@implements IDisposable

<div class="network-stats-graph">
    <h4>RPC Messages (60s) - Pending Integration</h4>
    <canvas @ref="_canvasElement" width="280" height="150"></canvas>
    <div class="stats-table">
        <div class="stats-row">
            <div class="stat-value client-sent">@GetLast60SecondsSum(_clientSentHistory)</div>
            <div class="arrow">→</div>
            <div class="stat-value server-recv">@GetLast60SecondsSum(_serverRecvHistory)</div>
        </div>
        <div class="stats-row">
            <div class="stat-value client-recv">@GetLast60SecondsSum(_clientRecvHistory)</div>
            <div class="arrow">←</div>
            <div class="stat-value server-sent">@GetLast60SecondsSum(_serverSentHistory)</div>
        </div>
        <div class="stats-header">
            <div>Client</div>
            <div></div>
            <div>Server</div>
        </div>
    </div>
</div>

<style>
    .network-stats-graph {
        background-color: #2a2a2a;
        padding: 20px;
        border-radius: 8px;
        color: white;
    }
    
    .network-stats-graph h4 {
        margin-top: 0;
        margin-bottom: 15px;
        color: #888;
        font-size: 18px;
    }
    
    .network-stats-graph canvas {
        background-color: #1a1a1a;
        border: 1px solid #444;
        border-radius: 4px;
        width: 100%;
        height: auto;
    }
    
    .stats-table {
        margin-top: 10px;
        font-size: 12px;
        font-family: monospace;
    }
    
    .stats-row {
        display: flex;
        align-items: center;
        margin-bottom: 5px;
        gap: 10px;
    }
    
    .stats-header {
        display: flex;
        margin-top: 8px;
        font-size: 11px;
        color: #888;
        border-top: 1px solid #444;
        padding-top: 5px;
    }
    
    .stats-header > div {
        flex: 1;
        text-align: center;
    }
    
    .stat-value {
        flex: 1;
        text-align: center;
        padding: 4px 8px;
        background-color: #1a1a1a;
        border: 1px solid #444;
        border-radius: 4px;
        min-width: 60px;
    }
    
    .stat-value.client-sent {
        border-color: #2196F3;
        color: #2196F3;
    }
    
    .stat-value.client-recv {
        border-color: #4CAF50;
        color: #4CAF50;
    }
    
    .stat-value.server-sent {
        border-color: #FF9800;
        color: #FF9800;
    }
    
    .stat-value.server-recv {
        border-color: #F44336;
        color: #F44336;
    }
    
    .arrow {
        flex: 0 0 auto;
        color: #666;
        font-size: 16px;
        font-weight: bold;
    }
</style>

@code {
    [Parameter] public GranvilleRpcGameClientService? RpcGameClient { get; set; }
    
    private ElementReference _canvasElement;
    private Timer? _updateTimer;
    private NetworkStatistics? _clientStats;
    private NetworkStatistics? _serverStats;
    
    // Data history for graph
    private readonly int _maxDataPoints = 60; // 60 seconds of data
    private readonly Queue<long> _clientSentHistory = new();
    private readonly Queue<long> _clientRecvHistory = new();
    private readonly Queue<long> _serverSentHistory = new();
    private readonly Queue<long> _serverRecvHistory = new();
    
    // For calculating packets per second
    private long _lastClientSent = 0;
    private long _lastClientRecv = 0;
    private long _lastServerSent = 0;
    private long _lastServerRecv = 0;
    
    protected override Task OnInitializedAsync()
    {
        if (RpcGameClient != null)
        {
            RpcGameClient.NetworkStatsUpdated += OnServerNetworkStatsUpdated;
        }
        
        // Start update timer
        _updateTimer = new Timer(async _ => await UpdateGraph(), null, TimeSpan.Zero, TimeSpan.FromSeconds(1));
        
        return Task.CompletedTask;
    }
    
    private void OnServerNetworkStatsUpdated(NetworkStatistics stats)
    {
        _serverStats = stats;
    }
    
    private async Task UpdateGraph()
    {
        try
        {
            // Get client stats
            if (RpcGameClient != null)
            {
                _clientStats = RpcGameClient.GetClientNetworkStats();
            }
            
            // Calculate packets per second
            long clientSentPerSec = 0;
            long clientRecvPerSec = 0;
            long serverSentPerSec = 0;
            long serverRecvPerSec = 0;
            
            if (_clientStats != null)
            {
                clientSentPerSec = Math.Max(0, _clientStats.PacketsSent - _lastClientSent);
                clientRecvPerSec = Math.Max(0, _clientStats.PacketsReceived - _lastClientRecv);
                _lastClientSent = _clientStats.PacketsSent;
                _lastClientRecv = _clientStats.PacketsReceived;
            }
            
            if (_serverStats != null)
            {
                serverSentPerSec = Math.Max(0, _serverStats.PacketsSent - _lastServerSent);
                serverRecvPerSec = Math.Max(0, _serverStats.PacketsReceived - _lastServerRecv);
                _lastServerSent = _serverStats.PacketsSent;
                _lastServerRecv = _serverStats.PacketsReceived;
            }
            
            // Add to history
            _clientSentHistory.Enqueue(clientSentPerSec);
            _clientRecvHistory.Enqueue(clientRecvPerSec);
            _serverSentHistory.Enqueue(serverSentPerSec);
            _serverRecvHistory.Enqueue(serverRecvPerSec);
            
            // Keep only recent history
            while (_clientSentHistory.Count > _maxDataPoints) _clientSentHistory.Dequeue();
            while (_clientRecvHistory.Count > _maxDataPoints) _clientRecvHistory.Dequeue();
            while (_serverSentHistory.Count > _maxDataPoints) _serverSentHistory.Dequeue();
            while (_serverRecvHistory.Count > _maxDataPoints) _serverRecvHistory.Dequeue();
            
            // Update the graph
            await InvokeAsync(async () =>
            {
                await DrawGraph();
                StateHasChanged();
            });
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error updating network stats graph: {ex.Message}");
        }
    }
    
    private async Task DrawGraph()
    {
        try
        {
            await JS.InvokeVoidAsync("drawNetworkGraph", 
                _canvasElement,
                _clientSentHistory.ToArray(),
                _clientRecvHistory.ToArray(),
                _serverSentHistory.ToArray(),
                _serverRecvHistory.ToArray());
        }
        catch
        {
            // Ignore JS interop errors during disposal
        }
    }
    
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            // Initialize the canvas
            await DrawGraph();
        }
    }
    
    private long GetLast60SecondsSum(Queue<long> history)
    {
        return history.Sum();
    }
    
    public void Dispose()
    {
        _updateTimer?.Dispose();
        
        if (RpcGameClient != null)
        {
            RpcGameClient.NetworkStatsUpdated -= OnServerNetworkStatsUpdated;
        }
    }
}