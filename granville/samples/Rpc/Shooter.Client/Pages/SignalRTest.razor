@page "/signalr-test"
@using Microsoft.AspNetCore.SignalR.Client
@using Shooter.Shared.Models
@implements IAsyncDisposable

<PageTitle>SignalR Test</PageTitle>

<div class="container">
    <h1>SignalR Chat Test</h1>
    
    <div class="connection-status">
        Connection Status: <span class="@(_hubConnection?.State == HubConnectionState.Connected ? "connected" : "disconnected")">
            @(_hubConnection?.State.ToString() ?? "Not initialized")
        </span>
    </div>
    
    <div class="chat-section">
        <h2>Chat Messages</h2>
        <div class="chat-messages">
            @foreach (var msg in _messages)
            {
                <div class="chat-message @(msg.IsSystemMessage ? "system" : "user")">
                    <span class="time">[@msg.Timestamp.ToString("HH:mm:ss")]</span>
                    <span class="sender">@msg.SenderName:</span>
                    <span class="text">@msg.Message</span>
                </div>
            }
        </div>
        
        <div class="chat-input">
            <input @bind="_messageInput" @onkeyup="@(async (e) => { if (e.Key == "Enter") await SendMessage(); })" 
                   placeholder="Type a message..." disabled="@(_hubConnection?.State != HubConnectionState.Connected)" />
            <button @onclick="SendMessage" disabled="@(_hubConnection?.State != HubConnectionState.Connected)">Send</button>
        </div>
    </div>
    
    <div class="stats-section">
        <h2>Zone Statistics</h2>
        @if (_latestStats != null)
        {
            <div class="stats">
                <p>Total Players: @_latestStats.TotalPlayers</p>
                <p>Total Enemies: @_latestStats.TotalEnemies</p>
                <p>Total Factories: @_latestStats.TotalFactories</p>
                <p>Active Zones: @_latestStats.ActiveZoneCount</p>
                <p>Last Update: @_latestStats.Timestamp.ToString("HH:mm:ss.fff")</p>
            </div>
        }
        else
        {
            <p>No statistics received yet...</p>
        }
        
        <div class="stats-controls">
            <button @onclick="SubscribeToStats" disabled="@(_hubConnection?.State != HubConnectionState.Connected || _subscribedToStats)">
                Subscribe to Stats
            </button>
            <button @onclick="UnsubscribeFromStats" disabled="@(_hubConnection?.State != HubConnectionState.Connected || !_subscribedToStats)">
                Unsubscribe from Stats
            </button>
        </div>
    </div>
    
    <div class="connection-controls">
        <button @onclick="Connect" disabled="@(_hubConnection?.State == HubConnectionState.Connected)">Connect</button>
        <button @onclick="Disconnect" disabled="@(_hubConnection?.State != HubConnectionState.Connected)">Disconnect</button>
    </div>
</div>

<style>
    .container {
        max-width: 800px;
        margin: 0 auto;
        padding: 20px;
    }
    
    .connection-status {
        padding: 10px;
        margin-bottom: 20px;
        background: #f0f0f0;
        border-radius: 5px;
    }
    
    .connected {
        color: green;
        font-weight: bold;
    }
    
    .disconnected {
        color: red;
        font-weight: bold;
    }
    
    .chat-section, .stats-section {
        margin-bottom: 30px;
        padding: 20px;
        border: 1px solid #ddd;
        border-radius: 5px;
    }
    
    .chat-messages {
        height: 300px;
        overflow-y: auto;
        border: 1px solid #ccc;
        padding: 10px;
        margin-bottom: 10px;
        background: #fafafa;
    }
    
    .chat-message {
        margin-bottom: 5px;
    }
    
    .chat-message.system {
        color: #666;
        font-style: italic;
    }
    
    .chat-message .time {
        color: #999;
        font-size: 0.9em;
    }
    
    .chat-message .sender {
        font-weight: bold;
        margin: 0 5px;
    }
    
    .chat-input {
        display: flex;
        gap: 10px;
    }
    
    .chat-input input {
        flex: 1;
        padding: 8px;
        border: 1px solid #ccc;
        border-radius: 4px;
    }
    
    .stats {
        background: #f9f9f9;
        padding: 15px;
        border-radius: 5px;
        margin-bottom: 15px;
    }
    
    button {
        padding: 8px 16px;
        background: #007bff;
        color: white;
        border: none;
        border-radius: 4px;
        cursor: pointer;
    }
    
    button:hover:not(:disabled) {
        background: #0056b3;
    }
    
    button:disabled {
        background: #ccc;
        cursor: not-allowed;
    }
    
    .connection-controls {
        margin-top: 20px;
        display: flex;
        gap: 10px;
    }
</style>

@code {
    private HubConnection? _hubConnection;
    private List<ChatMessage> _messages = new();
    private GlobalZoneStats? _latestStats;
    private string _messageInput = "";
    private bool _subscribedToStats = false;
    
    protected override async Task OnInitializedAsync()
    {
        await Connect();
    }
    
    private async Task Connect()
    {
        try
        {
            _hubConnection = new HubConnectionBuilder()
                .WithUrl("http://localhost:7071/gamehub") // Silo URL
                .WithAutomaticReconnect()
                .Build();
            
            // Set up event handlers
            _hubConnection.On<ChatMessage>("ReceiveChatMessage", (message) =>
            {
                _messages.Add(message);
                InvokeAsync(StateHasChanged);
            });
            
            _hubConnection.On<GlobalZoneStats>("ReceiveZoneStats", (stats) =>
            {
                _latestStats = stats;
                InvokeAsync(StateHasChanged);
            });
            
            _hubConnection.On<GameOverMessage>("GameOver", (message) =>
            {
                var gameOverChat = new ChatMessage(
                    "System",
                    "Game",
                    $"Game Over! Restarting in {message.RestartDelaySeconds} seconds...",
                    DateTime.UtcNow,
                    true
                );
                _messages.Add(gameOverChat);
                InvokeAsync(StateHasChanged);
            });
            
            _hubConnection.On("GameRestarted", () =>
            {
                var restartChat = new ChatMessage(
                    "System",
                    "Game",
                    "Game has been restarted!",
                    DateTime.UtcNow,
                    true
                );
                _messages.Add(restartChat);
                InvokeAsync(StateHasChanged);
            });
            
            _hubConnection.Reconnecting += (error) =>
            {
                var msg = new ChatMessage("System", "Connection", "Reconnecting...", DateTime.UtcNow, true);
                _messages.Add(msg);
                InvokeAsync(StateHasChanged);
                return Task.CompletedTask;
            };
            
            _hubConnection.Reconnected += (connectionId) =>
            {
                var msg = new ChatMessage("System", "Connection", "Reconnected!", DateTime.UtcNow, true);
                _messages.Add(msg);
                InvokeAsync(StateHasChanged);
                return Task.CompletedTask;
            };
            
            _hubConnection.Closed += (error) =>
            {
                var msg = new ChatMessage("System", "Connection", 
                    $"Connection closed: {error?.Message ?? "No error"}", DateTime.UtcNow, true);
                _messages.Add(msg);
                InvokeAsync(StateHasChanged);
                return Task.CompletedTask;
            };
            
            await _hubConnection.StartAsync();
        }
        catch (Exception ex)
        {
            var errorMsg = new ChatMessage("System", "Error", 
                $"Failed to connect: {ex.Message}", DateTime.UtcNow, true);
            _messages.Add(errorMsg);
        }
    }
    
    private async Task Disconnect()
    {
        if (_hubConnection != null)
        {
            await _hubConnection.DisposeAsync();
            _hubConnection = null;
            _subscribedToStats = false;
        }
    }
    
    private async Task SendMessage()
    {
        if (_hubConnection?.State == HubConnectionState.Connected && !string.IsNullOrWhiteSpace(_messageInput))
        {
            await _hubConnection.SendAsync("SendMessage", _messageInput);
            _messageInput = "";
        }
    }
    
    private async Task SubscribeToStats()
    {
        if (_hubConnection?.State == HubConnectionState.Connected)
        {
            await _hubConnection.SendAsync("SubscribeToZoneStats", 1); // 1 second interval
            _subscribedToStats = true;
        }
    }
    
    private async Task UnsubscribeFromStats()
    {
        if (_hubConnection?.State == HubConnectionState.Connected)
        {
            await _hubConnection.SendAsync("UnsubscribeFromZoneStats");
            _subscribedToStats = false;
        }
    }
    
    public async ValueTask DisposeAsync()
    {
        await Disconnect();
    }
}