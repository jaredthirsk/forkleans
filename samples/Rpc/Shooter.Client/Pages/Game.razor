@page "/game"
@using Shooter.Client.Services
@using Shooter.Client.Components
@using Shooter.Shared.Models
@inject ForleansRpcGameClientService RpcGameClient
@inject IJSRuntime JS
@inject NavigationManager Navigation
@inject ILogger<Game> _logger
@implements IDisposable

<PageTitle>Space Shooter</PageTitle>

<div class="game-container">
    @if (!_isConnected)
    {
        <div class="connection-form">
            <h2>Enter Game</h2>
            <input @bind="_playerName" placeholder="Enter your name" />
            <button @onclick="ConnectToGame" disabled="@_isConnecting">
                @if (_isConnecting)
                {
                    <span>Connecting...</span>
                }
                else
                {
                    <span>Connect</span>
                }
            </button>
            
            @if (!string.IsNullOrEmpty(_errorMessage))
            {
                <div class="error">@_errorMessage</div>
            }
            
            <div class="connection-type">
                <small>Using: Forkleans RPC (UDP/LiteNetLib)</small>
            </div>
        </div>
    }
    else
    {
        <div class="game-layout">
            <div class="game-main">
                @if (_usePhaser)
                {
                    <GamePhaser />
                }
                else
                {
                    <GameCanvas Width="1200" Height="800" 
                               WorldState="@_currentWorldState" 
                               PlayerId="@_playerId"
                               ServerId="@_currentServerId"
                               AvailableZones="@_availableZones"
                               OnMouseClick="HandleMouseClick"
                               OnMouseRightClick="HandleMouseRightClick"
                               OnMouseRelease="HandleMouseRelease" />
                }
            </div>
            <div class="game-sidebar">
                <GameControls IsConnected="_isConnected"
                             OnMove="HandleMove"
                             OnShoot="HandleShoot"
                             OnSpeedChange="HandleSpeedChange" />
                             
                <div class="game-stats">
                    <h4>Stats</h4>
                    <p>FPS: @_fps</p>
                    <p>Entities: @(_currentWorldState?.Entities?.Count ?? 0)</p>
                    <p>Connection: Forkleans RPC</p>
                    <p>Server: @_currentServerId</p>
                    <p>Renderer: @(_usePhaser ? "Phaser" : "Canvas")</p>
                </div>
                
                <button class="disconnect-btn" @onclick="Disconnect">Disconnect</button>
                <button class="toggle-btn" @onclick="ToggleRenderer">Switch to @(_usePhaser ? "Canvas" : "Phaser")</button>
            </div>
        </div>
    }
</div>

<style>
    .game-container {
        padding: 20px;
        min-height: calc(100vh - 56px);
        background-color: #1a1a1a;
    }
    
    .connection-form {
        max-width: 400px;
        margin: 100px auto;
        padding: 30px;
        background-color: #2a2a2a;
        border-radius: 8px;
        text-align: center;
    }
    
    .connection-form h2 {
        color: #888;
        margin-bottom: 20px;
    }
    
    .connection-form input {
        width: 100%;
        padding: 10px;
        margin-bottom: 20px;
        background-color: #333;
        border: 1px solid #444;
        color: white;
        border-radius: 4px;
    }
    
    .connection-form button {
        width: 100%;
        padding: 10px;
        background-color: #4CAF50;
        color: white;
        border: none;
        border-radius: 4px;
        cursor: pointer;
        font-size: 16px;
    }
    
    .connection-form button:disabled {
        background-color: #666;
        cursor: not-allowed;
    }
    
    .error {
        color: #ff4444;
        margin-top: 10px;
    }
    
    .connection-type {
        margin-top: 10px;
        color: #888;
    }
    
    .game-layout {
        display: flex;
        gap: 20px;
    }
    
    .game-sidebar {
        display: flex;
        flex-direction: column;
        gap: 20px;
    }
    
    .game-stats {
        background-color: #2a2a2a;
        padding: 20px;
        border-radius: 8px;
        color: white;
    }
    
    .game-stats h4 {
        margin-top: 0;
        color: #888;
    }
    
    .disconnect-btn {
        padding: 10px 20px;
        background-color: #d32f2f;
        color: white;
        border: none;
        border-radius: 4px;
        cursor: pointer;
    }
    
    .toggle-btn {
        padding: 10px 20px;
        background-color: #2196F3;
        color: white;
        border: none;
        border-radius: 4px;
        cursor: pointer;
        margin-top: 10px;
    }
</style>

@code {
    private string _playerName = "";
    private string _playerId = "";
    private string _currentServerId = "";
    private bool _isConnected = false;
    private bool _isConnecting = false;
    private string _errorMessage = "";
    private WorldState? _currentWorldState;
    private int _fps = 0;
    private DateTime _lastFpsUpdate = DateTime.UtcNow;
    private int _frameCount = 0;
    private Vector2 _currentMoveDirection = Vector2.Zero;
    private bool _currentIsShooting = false;
    private List<GridSquare> _availableZones = new();
    private float _currentSpeed = 1.0f;
    private Vector2 _shootDirection = Vector2.Zero;
    private bool _isMoving = false;
    private bool _usePhaser = false; // Default to Canvas renderer
    
    protected override void OnInitialized()
    {
        // Subscribe to RPC client events
        RpcGameClient.WorldStateUpdated += OnWorldStateUpdated;
        RpcGameClient.AvailableZonesUpdated += OnAvailableZonesUpdated;
        RpcGameClient.ServerChanged += OnServerChanged;
    }
    
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            // Check localStorage for remembered player name after first render
            try
            {
                var rememberedName = await JS.InvokeAsync<string>("localStorage.getItem", "playerName");
                if (!string.IsNullOrEmpty(rememberedName))
                {
                    _playerName = rememberedName;
                    // Auto-connect with remembered name
                    await ConnectToGame();
                    // Trigger UI update
                    StateHasChanged();
                }
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error checking localStorage for player name");
            }
        }
    }
    
    private async Task ConnectToGame()
    {
        if (string.IsNullOrWhiteSpace(_playerName))
        {
            _errorMessage = "Please enter your name";
            return;
        }
        
        _isConnecting = true;
        _errorMessage = "";
        
        try
        {
            // Save player name to localStorage
            await JS.InvokeVoidAsync("localStorage.setItem", "playerName", _playerName);
            
            // Connect using Forkleans RPC
            var connected = await RpcGameClient.ConnectAsync(_playerName);
            if (connected)
            {
                _playerId = RpcGameClient.PlayerId ?? string.Empty;
                _currentServerId = RpcGameClient.CurrentServerId ?? "Unknown";
                _isConnected = true;
                
                // Store player ID in localStorage for GamePhaser component
                await JS.InvokeVoidAsync("localStorage.setItem", "playerId", _playerId);
            }
            else
            {
                _errorMessage = "Failed to connect to game server";
            }
        }
        catch (Exception ex)
        {
            _errorMessage = $"Connection error: {ex.Message}";
        }
        finally
        {
            _isConnecting = false;
        }
    }
    
    private async Task Disconnect()
    {
        await RpcGameClient.DisconnectAsync();
        _isConnected = false;
        
        // Clear remembered player name and ID on disconnect
        await JS.InvokeVoidAsync("localStorage.removeItem", "playerName");
        await JS.InvokeVoidAsync("localStorage.removeItem", "playerId");
        
        Navigation.NavigateTo("/");
    }
    
    private async Task HandleMove(Vector2 direction)
    {
        _currentMoveDirection = direction * _currentSpeed;
        await UpdatePlayerInput();
    }
    
    private async Task HandleShoot(bool isShooting)
    {
        _currentIsShooting = isShooting;
        await UpdatePlayerInput();
    }
    
    private async Task HandleSpeedChange(float speed)
    {
        _currentSpeed = speed;
        // Update movement with new speed
        if (_currentMoveDirection.Length() > 0)
        {
            _currentMoveDirection = _currentMoveDirection.Normalized() * _currentSpeed;
            await UpdatePlayerInput();
        }
    }
    
    private void OnWorldStateUpdated(WorldState worldState)
    {
        _currentWorldState = worldState;
        
        // Update FPS counter
        _frameCount++;
        var now = DateTime.UtcNow;
        if ((now - _lastFpsUpdate).TotalSeconds >= 1)
        {
            _fps = _frameCount;
            _frameCount = 0;
            _lastFpsUpdate = now;
        }
        
        InvokeAsync(StateHasChanged);
    }
    
    private void OnAvailableZonesUpdated(List<GridSquare> availableZones)
    {
        _availableZones = availableZones;
        InvokeAsync(StateHasChanged);
    }
    
    private void OnServerChanged(string serverId)
    {
        _currentServerId = serverId;
        InvokeAsync(StateHasChanged);
    }
    
    private async Task HandleMouseClick((float x, float y) position)
    {
        if (!_isConnected || _currentWorldState == null) return;
        
        // Calculate direction from center to click position for shooting
        var centerX = 600; // Half of canvas width
        var centerY = 400; // Half of canvas height
        _shootDirection = new Vector2(position.x - centerX, position.y - centerY).Normalized();
        
        _currentIsShooting = true;
        await UpdatePlayerInput();
    }
    
    private async Task HandleMouseRightClick((float x, float y) position)
    {
        if (!_isConnected || _currentWorldState == null) return;
        
        // Calculate direction from center to click position for movement
        var centerX = 600; // Half of canvas width
        var centerY = 400; // Half of canvas height
        var direction = new Vector2(position.x - centerX, position.y - centerY).Normalized();
        
        _currentMoveDirection = direction * _currentSpeed;
        await UpdatePlayerInput();
    }
    
    private async Task HandleMouseRelease()
    {
        if (!_isConnected) return;
        
        _currentIsShooting = false;
        await UpdatePlayerInput();
    }
    
    private async Task UpdatePlayerInput()
    {
        if (!_isConnected) return;
        
        // Use the new extended input method that supports separate move and shoot directions
        Vector2? moveDir = _currentMoveDirection.Length() > 0 ? _currentMoveDirection : null;
        Vector2? shootDir = _currentIsShooting && _shootDirection.Length() > 0 ? _shootDirection : null;
        
        await RpcGameClient.SendPlayerInputEx(moveDir, shootDir);
    }
    
    private void ToggleRenderer()
    {
        _usePhaser = !_usePhaser;
        StateHasChanged();
    }
    
    public void Dispose()
    {
        RpcGameClient.WorldStateUpdated -= OnWorldStateUpdated;
        RpcGameClient.AvailableZonesUpdated -= OnAvailableZonesUpdated;
        RpcGameClient.ServerChanged -= OnServerChanged;
    }
}