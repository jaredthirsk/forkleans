@namespace Shooter.Client.Components
@using Shooter.Shared.Models
@inject IJSRuntime JS

<div class="game-controls">
    <div class="control-info">
        <h4>Controls</h4>
        <p>WASD - Move</p>
        <p>0-9 - Set Speed</p>
        <p>Right Click - Set Heading</p>
        <p>Left Click - Shoot</p>
    </div>
    
    <div class="auto-controls">
        <h4>Auto Pilot</h4>
        <label class="toggle-label">
            <input type="checkbox" @bind="AutoMove" @bind:after="OnAutoMoveChanged" />
            <span>Auto Move</span>
        </label>
        <label class="toggle-label">
            <input type="checkbox" @bind="AutoShoot" @bind:after="OnAutoShootChanged" />
            <span>Auto Shoot</span>
        </label>
    </div>
    
    <div class="test-mode">
        <h4>Test Mode</h4>
        <label class="toggle-label">
            <input type="checkbox" @bind="TestMode" @bind:after="OnTestModeChanged" />
            <span>Enable Test Bot</span>
        </label>
    </div>
    
    @if (IsConnected)
    {
        <div class="status connected">
            <span class="status-dot"></span>
            Connected to server
        </div>
    }
    else
    {
        <div class="status disconnected">
            <span class="status-dot"></span>
            Disconnected
        </div>
    }
</div>

<style>
    .game-controls {
        background-color: #2a2a2a;
        padding: 20px;
        border-radius: 8px;
        color: white;
        min-width: 200px;
    }
    
    .control-info h4 {
        margin-top: 0;
        color: #888;
    }
    
    .control-info p {
        margin: 5px 0;
        font-size: 14px;
    }
    
    .status {
        margin-top: 20px;
        padding: 10px;
        border-radius: 4px;
        display: flex;
        align-items: center;
        font-size: 14px;
    }
    
    .status.connected {
        background-color: #1a4d1a;
    }
    
    .status.disconnected {
        background-color: #4d1a1a;
    }
    
    .status-dot {
        width: 8px;
        height: 8px;
        border-radius: 50%;
        margin-right: 8px;
    }
    
    .connected .status-dot {
        background-color: #00ff00;
    }
    
    .disconnected .status-dot {
        background-color: #ff0000;
    }
    
    .auto-controls, .test-mode {
        margin-top: 20px;
        padding-top: 20px;
        border-top: 1px solid #444;
    }
    
    .auto-controls h4, .test-mode h4 {
        margin-top: 0;
        margin-bottom: 10px;
        color: #888;
    }
    
    .toggle-label {
        display: flex;
        align-items: center;
        margin-bottom: 10px;
        cursor: pointer;
        font-size: 14px;
    }
    
    .toggle-label input[type="checkbox"] {
        margin-right: 8px;
        cursor: pointer;
    }
    
    .toggle-label:hover {
        color: #ddd;
    }
</style>

@code {
    [Parameter] public bool IsConnected { get; set; }
    [Parameter] public EventCallback<Vector2> OnMove { get; set; }
    [Parameter] public EventCallback<bool> OnShoot { get; set; }
    [Parameter] public EventCallback<float> OnSpeedChange { get; set; }
    [Parameter] public EventCallback<bool> OnAutoMoveChange { get; set; }
    [Parameter] public EventCallback<bool> OnAutoShootChange { get; set; }
    [Parameter] public EventCallback<bool> OnTestModeChange { get; set; }
    
    private bool AutoMove { get; set; }
    private bool AutoShoot { get; set; }
    private bool TestMode { get; set; } = true; // Enabled by default
    
    private readonly Dictionary<string, bool> _keysPressed = new();
    
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await JS.InvokeVoidAsync("addKeyboardListeners", 
                DotNetObjectReference.Create(this));
        }
    }
    
    [JSInvokable]
    public async Task OnKeyDown(string key)
    {
        _keysPressed[key.ToLower()] = true;
        await UpdateInput();
    }
    
    [JSInvokable]
    public async Task OnKeyUp(string key)
    {
        _keysPressed[key.ToLower()] = false;
        await UpdateInput();
    }
    
    [JSInvokable]
    public async Task OnSpeedKey(string key)
    {
        if (int.TryParse(key, out var speedLevel))
        {
            // Map 0-9 to speed multiplier (0 = stop, 1-9 = increasing speed)
            var speed = speedLevel / 9.0f;
            await OnSpeedChange.InvokeAsync(speed);
        }
    }
    
    private async Task UpdateInput()
    {
        var moveDir = Vector2.Zero;
        
        if (_keysPressed.GetValueOrDefault("w")) moveDir.Y -= 1;
        if (_keysPressed.GetValueOrDefault("s")) moveDir.Y += 1;
        if (_keysPressed.GetValueOrDefault("a")) moveDir.X -= 1;
        if (_keysPressed.GetValueOrDefault("d")) moveDir.X += 1;
        
        // Always update movement
        await OnMove.InvokeAsync(moveDir);
        
        // Only update shooting if the space key state changed
        var isShootingNow = _keysPressed.GetValueOrDefault(" ");
        if (isShootingNow != _lastShootState)
        {
            await OnShoot.InvokeAsync(isShootingNow);
            _lastShootState = isShootingNow;
        }
    }
    
    private bool _lastShootState = false;
    
    private async Task OnAutoMoveChanged()
    {
        await OnAutoMoveChange.InvokeAsync(AutoMove);
    }
    
    private async Task OnAutoShootChanged()
    {
        await OnAutoShootChange.InvokeAsync(AutoShoot);
    }
    
    private async Task OnTestModeChanged()
    {
        await OnTestModeChange.InvokeAsync(TestMode);
    }
}