<Project>
  <!-- Granville RPC Fork: Build all assemblies as Granville.Orleans.* -->
  
  <!-- Handle projects that already have Microsoft.Orleans PackageId set -->
  <PropertyGroup Condition="'$(PackageId)' != '' and $([System.String]::Copy('$(PackageId)').StartsWith('Microsoft.Orleans'))">
    <!-- Store original for reference -->
    <OriginalPackageId>$(PackageId)</OriginalPackageId>
    
    <!-- Override both PackageId and AssemblyName to use Granville prefix -->
    <PackageId>$([System.String]::Copy('$(PackageId)').Replace('Microsoft.Orleans', 'Granville.Orleans'))</PackageId>
    <AssemblyName>$([System.String]::Copy('$(OriginalPackageId)').Replace('Microsoft.Orleans', 'Granville.Orleans'))</AssemblyName>
    <TargetName>$([System.String]::Copy('$(OriginalPackageId)').Replace('Microsoft.Orleans', 'Granville.Orleans'))</TargetName>
    
    <!-- Add version suffix -->
    <VersionSuffix>granville</VersionSuffix>
  </PropertyGroup>

  <!-- Handle Orleans.* project files (e.g., Orleans.Core.csproj) -->
  <PropertyGroup Condition="$([System.String]::Copy('$(MSBuildProjectName)').StartsWith('Orleans.'))">
    <!-- Set both assembly and package names to Granville.Orleans.* -->
    <AssemblyName>Granville.$(MSBuildProjectName)</AssemblyName>
    <TargetName>Granville.$(MSBuildProjectName)</TargetName>
    <PackageId>Granville.$(MSBuildProjectName)</PackageId>
    
    <!-- Add version suffix -->
    <VersionSuffix>granville</VersionSuffix>
  </PropertyGroup>

  <!-- Update package metadata for Granville -->
  <PropertyGroup>
    <Authors>Granville RPC Contributors</Authors>
    <PackageProjectUrl>https://github.com/jaredthirsk/orleans</PackageProjectUrl>
    <PackageDescription>$(PackageDescription) - Granville RPC Fork with InternalsVisibleTo support</PackageDescription>
  </PropertyGroup>

  <!-- Fix project references to use Granville names -->
  <Target Name="UpdateReferenceCopyLocalPaths" BeforeTargets="ResolveAssemblyReferences">
    <ItemGroup>
      <!-- For each ReferenceCopyLocalPaths that starts with Orleans., update to Granville.Orleans. -->
      <ReferenceCopyLocalPaths Condition="$([System.String]::Copy('%(ReferenceCopyLocalPaths.Filename)').StartsWith('Orleans.'))">
        <DestinationSubDirectory Condition="'%(ReferenceCopyLocalPaths.DestinationSubDirectory)' != ''">%(ReferenceCopyLocalPaths.DestinationSubDirectory)</DestinationSubDirectory>
        <OriginalItemSpec>%(ReferenceCopyLocalPaths.FullPath)</OriginalItemSpec>
      </ReferenceCopyLocalPaths>
    </ItemGroup>
  </Target>

  <!-- Alternative approach: Map reference assembly names -->
  <Target Name="MapReferenceAssemblies" AfterTargets="ResolveProjectReferences">
    <ItemGroup>
      <!-- Create new mapped references -->
      <_MappedReferenceCopyLocalPaths Include="@(ReferenceCopyLocalPaths)" 
                                      Condition="$([System.String]::Copy('%(Filename)').StartsWith('Orleans.'))">
        <OriginalFilename>%(Filename)</OriginalFilename>
        <MappedFilename>Granville.%(Filename)</MappedFilename>
      </_MappedReferenceCopyLocalPaths>
      
      <!-- Update the paths for Orleans assemblies -->
      <ReferenceCopyLocalPaths Remove="@(_MappedReferenceCopyLocalPaths)" />
      <ReferenceCopyLocalPaths Include="@(_MappedReferenceCopyLocalPaths->'%(RootDir)%(Directory)%(MappedFilename)%(Extension)')" />
    </ItemGroup>
  </Target>

  <!-- Ensure assembly resolution works with Granville names -->
  <Target Name="UpdateAssemblySearchPaths" BeforeTargets="ResolveAssemblyReferences">
    <PropertyGroup>
      <AssemblySearchPaths>
        $(AssemblySearchPaths);
        {HintPathFromItem};
        {TargetFrameworkDirectory};
        {RawFileName};
      </AssemblySearchPaths>
    </PropertyGroup>
  </Target>

</Project>