<Project>
  <!-- Granville RPC Fork: Conditionally build assemblies as Granville.Orleans.* -->
  <!-- Default behavior: Build as original Orleans (BuildAsGranville defaults to false) -->
  
  <!-- Set InformationVersion here, since $(Version) is already set at this point. -->
  <PropertyGroup>
    <InformationalVersion>$(Version). Commit Hash: $(GitHeadSha)</InformationalVersion>
  </PropertyGroup>

  <!-- Enable Orleans code generation when OrleansBuildTimeCodeGen is true -->
  <Import Condition=" '$(OrleansBuildTimeCodeGen)' == 'true' " Project="$(MSBuildThisFileDirectory)src/Orleans.CodeGenerator/build/Microsoft.Orleans.CodeGenerator.props" />
  <Import Condition=" '$(OrleansBuildTimeCodeGen)' == 'true' " Project="$(MSBuildThisFileDirectory)src/Orleans.Sdk/build/Microsoft.Orleans.Sdk.targets" />
  <ItemGroup>
    <!-- Enable code generator - exclude analyzer projects themselves to avoid circular dependencies -->
    <ProjectReference
      Include="$(SourceRoot)src/Orleans.CodeGenerator/Orleans.CodeGenerator.csproj"
      OutputItemType="Analyzer"
      ReferenceOutputAssembly="false"
      PrivateAssets="None"
      Condition=" '$(OrleansBuildTimeCodeGen)' == 'true' and '$(IsRoslynComponent)' != 'true' and '$(IsOrleansFrameworkPart)' != 'false' "/>
    <ProjectReference
      Include="$(SourceRoot)src/Orleans.Analyzers/Orleans.Analyzers.csproj"
      AssetTargetFallback="netstandard2.0"
      UndefineProperties="TargetFramework"
      SkipGetTargetFrameworkProperties="true"
      OutputItemType="Analyzer"
      ReferenceOutputAssembly="false"
      PrivateAssets="None"
      Condition=" '$(OrleansBuildTimeCodeGen)' == 'true' and '$(IsRoslynComponent)' != 'true' and '$(IsOrleansFrameworkPart)' != 'false' "/>
  </ItemGroup>
  
  <!-- Handle projects that already have Microsoft.Orleans PackageId set -->
  <PropertyGroup Condition="'$(BuildAsGranville)' == 'true' and '$(PackageId)' != '' and $([System.String]::Copy('$(PackageId)').StartsWith('Microsoft.Orleans'))">
    <!-- Store original for reference -->
    <OriginalPackageId>$(PackageId)</OriginalPackageId>
    
    <!-- Override both PackageId and AssemblyName to use Granville.Orleans.* -->
    <PackageId>$([System.String]::Copy('$(PackageId)').Replace('Microsoft.Orleans', 'Granville.Orleans'))</PackageId>
    <AssemblyName>$([System.String]::Copy('$(OriginalPackageId)').Replace('Microsoft.Orleans', 'Granville.Orleans'))</AssemblyName>
    <TargetName>$(AssemblyName)</TargetName>
    
    <!-- Pass the final assembly name to the code generator -->
    <Granville_FinalAssemblyName>$(AssemblyName)</Granville_FinalAssemblyName>
    
    <!-- Add version suffix -->
    <VersionSuffix>granville</VersionSuffix>
  </PropertyGroup>
  

  <!-- Handle Orleans.* project files (e.g., Orleans.Core.csproj) -->
  <!-- Exclude Orleans.Rpc.* projects and analyzer/codegen projects -->
  <PropertyGroup Condition="'$(BuildAsGranville)' == 'true' and $([System.String]::Copy('$(MSBuildProjectName)').StartsWith('Orleans.')) and !$([System.String]::Copy('$(MSBuildProjectName)').StartsWith('Orleans.Rpc.')) and '$(MSBuildProjectName)' != 'Orleans.Analyzers' and '$(MSBuildProjectName)' != 'Orleans.CodeGenerator'">
    <!-- Change both PackageId and AssemblyName to use Granville.Orleans.* -->
    <PackageId>Granville.$(MSBuildProjectName)</PackageId>
    <AssemblyName>Granville.$(MSBuildProjectName)</AssemblyName>
    <TargetName>$(AssemblyName)</TargetName>
    
    <!-- Pass the final assembly name to the code generator -->
    <Granville_FinalAssemblyName>$(AssemblyName)</Granville_FinalAssemblyName>
    
    <!-- Add version suffix -->
    <VersionSuffix>granville</VersionSuffix>
  </PropertyGroup>

  <!-- Update package metadata for Granville -->
  <PropertyGroup Condition="'$(BuildAsGranville)' == 'true'">
    <Authors>Granville RPC Contributors</Authors>
    <PackageProjectUrl>https://github.com/jaredthirsk/orleans</PackageProjectUrl>
    <PackageDescription>$(PackageDescription) - Granville RPC Fork with InternalsVisibleTo support</PackageDescription>
  </PropertyGroup>

  <!-- Create compatibility copies after build -->
  <Target Name="CreateCompatibilityCopies" AfterTargets="AfterBuild" Condition="'$(BuildAsGranville)' == 'true'">
    <ItemGroup>
      <!-- Find all Granville.Orleans.* assemblies in output -->
      <GranvilleAssemblies Include="$(OutputPath)Granville.Orleans.*.dll" />
    </ItemGroup>
    
    <Message Text="Creating compatibility copies for project references..." Importance="normal" />
    
    <!-- Create Orleans.* copies alongside Granville.Orleans.* assemblies -->
    <Copy SourceFiles="@(GranvilleAssemblies)" 
          DestinationFiles="@(GranvilleAssemblies->'$(OutputPath)%(Filename).dll'->Replace('Granville.Orleans.', 'Orleans.'))" 
          SkipUnchangedFiles="true" />
          
    <!-- Also copy PDB files if they exist -->
    <ItemGroup>
      <GranvillePdbs Include="$(OutputPath)Granville.Orleans.*.pdb" />
    </ItemGroup>
    
    <Copy SourceFiles="@(GranvillePdbs)" 
          DestinationFiles="@(GranvillePdbs->'$(OutputPath)%(Filename).pdb'->Replace('Granville.Orleans.', 'Orleans.'))" 
          SkipUnchangedFiles="true" 
          Condition="'@(GranvillePdbs)' != ''" />
  </Target>

  <!-- Import compatibility targets - DISABLED: Using type-forwarding shims instead -->
  <!-- <Import Project="$(MSBuildThisFileDirectory)Directory.Build.targets.compatibility" /> -->
  
  <!-- Import pack targets to ensure Granville assemblies are packed correctly -->
  <Import Project="$(MSBuildThisFileDirectory)Directory.Build.targets.pack" />

  <!-- Rewrite NuGet dependencies for Granville packages to use -granville-shim versions -->
  <Target Name="RewriteGranvillePackageDependencies" 
          BeforeTargets="GenerateNuspec;_GetPackageFiles"
          Condition="'$(BuildAsGranville)' == 'true' and '$(IsPackable)' == 'true'">
    
    <Message Text="RewriteGranvillePackageDependencies executing for $(PackageId)" Importance="high" />
    
    <!-- Process ProjectReference items to modify their metadata -->
    <ItemGroup>
      <!-- For ProjectReferences that will become Microsoft.Orleans.* packages, add version suffix -->
      <!-- This now includes Orleans.Rpc.* projects that reference Orleans.* projects -->
      <ProjectReference Condition="$([System.String]::Copy('%(Filename)').StartsWith('Orleans.')) and !$([System.String]::Copy('%(Filename)').StartsWith('Orleans.Rpc.'))">
        <VersionSuffix>granville-shim</VersionSuffix>
        <PackageVersion>$(Version)-granville-shim</PackageVersion>
      </ProjectReference>
    </ItemGroup>
  </Target>
  
  <!-- Hook into the Pack target to modify dependencies -->
  <Target Name="UpdateGranvillePackDependencies"
          BeforeTargets="_GetPackageTargetPath"
          Condition="'$(BuildAsGranville)' == 'true' and '$(IsPackable)' == 'true'">
    
    <Message Text="UpdateGranvillePackDependencies executing for $(PackageId)" Importance="high" />
    
    <!-- Update project references to point to Granville packages -->
    <ItemGroup>
      <_ProjectReferencesWithPackageId Include="@(ProjectReference)" Condition="'%(ProjectReference.OutputItemType)' == '_PackageProjectReference' or '%(ProjectReference.ReferenceOutputAssembly)' != 'false'">
        <PackageId Condition="$([System.String]::Copy('%(Filename)').StartsWith('Orleans.')) and !$([System.String]::Copy('%(Filename)').StartsWith('Orleans.Rpc.'))">Granville.$([System.String]::Copy('%(Filename)'))</PackageId>
      </_ProjectReferencesWithPackageId>
    </ItemGroup>
  </Target>
  
  <!-- Post-process nuspec file after generation -->
  <Target Name="PostProcessGranvilleNuspec"
          AfterTargets="GenerateNuspec"
          Condition="'$(BuildAsGranville)' == 'true' and '$(IsPackable)' == 'true'">
    
    <PropertyGroup>
      <!-- Compute the nuspec file path -->
      <_NuspecFilePath>$(BaseIntermediateOutputPath)$(Configuration)\$(PackageId).$(PackageVersion).nuspec</_NuspecFilePath>
    </PropertyGroup>
    
    <Message Text="PostProcessGranvilleNuspec: Looking for nuspec at $(_NuspecFilePath)" Importance="high" />
    
    <!-- Read the nuspec file to check if it needs processing -->
    <ReadLinesFromFile File="$(_NuspecFilePath)" Condition="Exists('$(_NuspecFilePath)')">
      <Output TaskParameter="Lines" ItemName="NuspecLines" />
    </ReadLinesFromFile>
    
    <!-- Check if file has already been processed (contains Granville.Orleans) -->
    <PropertyGroup>
      <_NuspecContent>@(NuspecLines, '%0A')</_NuspecContent>
      <_AlreadyProcessed>$([System.String]::Copy('$(_NuspecContent)').Contains('Granville.Orleans'))</_AlreadyProcessed>
    </PropertyGroup>
    
    <!-- Process each line to modify Microsoft.Orleans.* dependencies only if not already processed -->
    <ItemGroup Condition="Exists('$(_NuspecFilePath)') and '$(_AlreadyProcessed)' != 'true'">
      <ModifiedNuspecLines Include="@(NuspecLines)">
        <!-- For Granville packages with our version, change Microsoft.Orleans.* to Granville.Orleans.* -->
        <Text Condition="$([System.String]::Copy('%(Identity)').Contains('&lt;dependency id=&quot;Microsoft.Orleans.')) and $([System.String]::Copy('%(Identity)').Contains('version=&quot;$(PackageVersion)&quot;'))">$([System.Text.RegularExpressions.Regex]::Replace('%(Identity)', 'id=&quot;Microsoft\.Orleans\.', 'id=&quot;Granville.Orleans.'))</Text>
        <!-- Keep other lines unchanged -->
        <Text Condition="!($([System.String]::Copy('%(Identity)').Contains('&lt;dependency id=&quot;Microsoft.Orleans.')) and $([System.String]::Copy('%(Identity)').Contains('version=&quot;$(PackageVersion)&quot;')))">%(Identity)</Text>
      </ModifiedNuspecLines>
    </ItemGroup>
    
    <!-- Write the modified nuspec back only if it needs processing -->
    <WriteLinesToFile File="$(_NuspecFilePath)" Lines="@(ModifiedNuspecLines->'%(Text)')" Overwrite="true" Condition="Exists('$(_NuspecFilePath)') and '$(_AlreadyProcessed)' != 'true'" />
    
    <Message Text="PostProcessGranvilleNuspec completed for $(_NuspecFilePath)" Importance="high" Condition="Exists('$(_NuspecFilePath)') and '$(_AlreadyProcessed)' != 'true'" />
    <Message Text="PostProcessGranvilleNuspec skipped - already processed $(_NuspecFilePath)" Importance="high" Condition="Exists('$(_NuspecFilePath)') and '$(_AlreadyProcessed)' == 'true'" />
  </Target>

  <!-- Import Granville-specific build properties -->
  <Import Project="Directory.Build.Granville.props" Condition="Exists('Directory.Build.Granville.props')" />

</Project>